openapi: 3.0.0
info:
  title: CRM System API
  version: 1.0.0
  description: API for managing Clients and Invoices
servers:
  - url: http://api.example.com/v1
components:
  schemas:
    ClientRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        phone:
          type: string
          example: "+1234567890"
    ClientResponse:
      allOf:
        - $ref: '#/components/schemas/ClientRequest'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
    InvoiceRequest:
      type: object
      required:
        - amount
        - date
        - client_id
      properties:
        amount:
          type: number
          format: float
          example: 199.99
        date:
          type: string
          format: date
          example: "2023-10-05"
        status:
          type: string
          enum: [pending, paid]
          default: pending
          example: pending
        client_id:
          type: integer
          format: int64
          example: 1
    InvoiceResponse:
      allOf:
        - $ref: '#/components/schemas/InvoiceRequest'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
paths:
  /clients:
    get:
      tags: [Clients]
      summary: Get all clients
      parameters:
        - in: query
          name: name
          schema: { type: string }
          description: Filter clients by name
        - in: query
          name: email
          schema: { type: string }
          description: Filter clients by email
      responses:
        '200':
          description: A list of clients
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ClientResponse' }
    post:
      tags: [Clients]
      summary: Create a new client
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ClientRequest' }
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClientResponse' }
        '400':
          description: Invalid input
  /clients/{clientId}:
    get:
      tags: [Clients]
      summary: Get a client by ID
      parameters:
        - in: path
          name: clientId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Client found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClientResponse' }
        '404':
          description: Client not found
    put:
      tags: [Clients]
      summary: Update a client by ID
      parameters:
        - in: path
          name: clientId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ClientRequest' }
      responses:
        '200':
          description: Client updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClientResponse' }
        '400':
          description: Invalid input
        '404':
          description: Client not found
    delete:
      tags: [Clients]
      summary: Delete a client by ID
      parameters:
        - in: path
          name: clientId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204':
          description: Client deleted
        '404':
          description: Client not found
  /invoices:
    get:
      tags: [Invoices]
      summary: Get all invoices
      parameters:
        - in: query
          name: client_id
          schema: { type: integer, format: int64 }
          description: Filter invoices by client ID
      responses:
        '200':
          description: A list of invoices
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/InvoiceResponse' }
    post:
      tags: [Invoices]
      summary: Create a new invoice
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InvoiceRequest' }
      responses:
        '201':
          description: Invoice created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InvoiceResponse' }
        '400':
          description: Invalid input
  /invoices/{invoiceId}:
    get:
      tags: [Invoices]
      summary: Get an invoice by ID
      parameters:
        - in: path
          name: invoiceId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Invoice found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InvoiceResponse' }
        '404':
          description: Invoice not found
    put:
      tags: [Invoices]
      summary: Update an invoice by ID
      parameters:
        - in: path
          name: invoiceId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InvoiceRequest' }
      responses:
        '200':
          description: Invoice updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InvoiceResponse' }
        '400':
          description: Invalid input
        '404':
          description: Invoice not found
    delete:
      tags: [Invoices]
      summary: Delete an invoice by ID
      parameters:
        - in: path
          name: invoiceId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204':
          description: Invoice deleted
        '404':
          description: Invoice not found