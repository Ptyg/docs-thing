/* tslint:disable */
/* eslint-disable */
/**
 * CRM System API
 * API for managing Clients and Invoices
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientRequest,
  ClientResponse,
} from '../models/index';
import {
    ClientRequestFromJSON,
    ClientRequestToJSON,
    ClientResponseFromJSON,
    ClientResponseToJSON,
} from '../models/index';

export interface ClientsClientIdDeleteRequest {
    clientId: number;
}

export interface ClientsClientIdGetRequest {
    clientId: number;
}

export interface ClientsClientIdPutRequest {
    clientId: number;
    clientRequest: ClientRequest;
}

export interface ClientsGetRequest {
    name?: string;
    email?: string;
}

export interface ClientsPostRequest {
    clientRequest: ClientRequest;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     * Delete a client by ID
     */
    async clientsClientIdDeleteRaw(requestParameters: ClientsClientIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling clientsClientIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a client by ID
     */
    async clientsClientIdDelete(requestParameters: ClientsClientIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clientsClientIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a client by ID
     */
    async clientsClientIdGetRaw(requestParameters: ClientsClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientResponse>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling clientsClientIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientResponseFromJSON(jsonValue));
    }

    /**
     * Get a client by ID
     */
    async clientsClientIdGet(requestParameters: ClientsClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientResponse> {
        const response = await this.clientsClientIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a client by ID
     */
    async clientsClientIdPutRaw(requestParameters: ClientsClientIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientResponse>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling clientsClientIdPut().'
            );
        }

        if (requestParameters['clientRequest'] == null) {
            throw new runtime.RequiredError(
                'clientRequest',
                'Required parameter "clientRequest" was null or undefined when calling clientsClientIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientRequestToJSON(requestParameters['clientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientResponseFromJSON(jsonValue));
    }

    /**
     * Update a client by ID
     */
    async clientsClientIdPut(requestParameters: ClientsClientIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientResponse> {
        const response = await this.clientsClientIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all clients
     */
    async clientsGetRaw(requestParameters: ClientsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientResponseFromJSON));
    }

    /**
     * Get all clients
     */
    async clientsGet(requestParameters: ClientsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientResponse>> {
        const response = await this.clientsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new client
     */
    async clientsPostRaw(requestParameters: ClientsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientResponse>> {
        if (requestParameters['clientRequest'] == null) {
            throw new runtime.RequiredError(
                'clientRequest',
                'Required parameter "clientRequest" was null or undefined when calling clientsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientRequestToJSON(requestParameters['clientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientResponseFromJSON(jsonValue));
    }

    /**
     * Create a new client
     */
    async clientsPost(requestParameters: ClientsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientResponse> {
        const response = await this.clientsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
