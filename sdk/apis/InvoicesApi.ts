/* tslint:disable */
/* eslint-disable */
/**
 * CRM System API
 * API for managing Clients and Invoices
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InvoiceRequest,
  InvoiceResponse,
} from '../models/index';
import {
    InvoiceRequestFromJSON,
    InvoiceRequestToJSON,
    InvoiceResponseFromJSON,
    InvoiceResponseToJSON,
} from '../models/index';

export interface InvoicesGetRequest {
    clientId?: number;
}

export interface InvoicesInvoiceIdDeleteRequest {
    invoiceId: number;
}

export interface InvoicesInvoiceIdGetRequest {
    invoiceId: number;
}

export interface InvoicesInvoiceIdPutRequest {
    invoiceId: number;
    invoiceRequest: InvoiceRequest;
}

export interface InvoicesPostRequest {
    invoiceRequest: InvoiceRequest;
}

/**
 * 
 */
export class InvoicesApi extends runtime.BaseAPI {

    /**
     * Get all invoices
     */
    async invoicesGetRaw(requestParameters: InvoicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvoiceResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceResponseFromJSON));
    }

    /**
     * Get all invoices
     */
    async invoicesGet(requestParameters: InvoicesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvoiceResponse>> {
        const response = await this.invoicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an invoice by ID
     */
    async invoicesInvoiceIdDeleteRaw(requestParameters: InvoicesInvoiceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['invoiceId'] == null) {
            throw new runtime.RequiredError(
                'invoiceId',
                'Required parameter "invoiceId" was null or undefined when calling invoicesInvoiceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/invoices/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters['invoiceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an invoice by ID
     */
    async invoicesInvoiceIdDelete(requestParameters: InvoicesInvoiceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invoicesInvoiceIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an invoice by ID
     */
    async invoicesInvoiceIdGetRaw(requestParameters: InvoicesInvoiceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters['invoiceId'] == null) {
            throw new runtime.RequiredError(
                'invoiceId',
                'Required parameter "invoiceId" was null or undefined when calling invoicesInvoiceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/invoices/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters['invoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     * Get an invoice by ID
     */
    async invoicesInvoiceIdGet(requestParameters: InvoicesInvoiceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.invoicesInvoiceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an invoice by ID
     */
    async invoicesInvoiceIdPutRaw(requestParameters: InvoicesInvoiceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters['invoiceId'] == null) {
            throw new runtime.RequiredError(
                'invoiceId',
                'Required parameter "invoiceId" was null or undefined when calling invoicesInvoiceIdPut().'
            );
        }

        if (requestParameters['invoiceRequest'] == null) {
            throw new runtime.RequiredError(
                'invoiceRequest',
                'Required parameter "invoiceRequest" was null or undefined when calling invoicesInvoiceIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/invoices/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters['invoiceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceRequestToJSON(requestParameters['invoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     * Update an invoice by ID
     */
    async invoicesInvoiceIdPut(requestParameters: InvoicesInvoiceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.invoicesInvoiceIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new invoice
     */
    async invoicesPostRaw(requestParameters: InvoicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters['invoiceRequest'] == null) {
            throw new runtime.RequiredError(
                'invoiceRequest',
                'Required parameter "invoiceRequest" was null or undefined when calling invoicesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/invoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceRequestToJSON(requestParameters['invoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new invoice
     */
    async invoicesPost(requestParameters: InvoicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.invoicesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
